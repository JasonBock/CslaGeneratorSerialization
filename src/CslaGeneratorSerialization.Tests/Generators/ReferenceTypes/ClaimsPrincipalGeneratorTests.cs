using NUnit.Framework;

namespace CslaGeneratorSerialization.Tests.Generators.ValueTypes;

public static class ClaimsPrincipalGeneratorTests
{
	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Csla;
			using CslaGeneratorSerialization;
			using System;
			using System.Security.Claims;

			namespace Domains;

			[GeneratorSerializable]
			public sealed partial class Data
				: BusinessBase<Data>
			{
				public static readonly PropertyInfo<ClaimsPrincipal> ContentsProperty =
					RegisterProperty<ClaimsPrincipal>(_ => _.Contents);
				public ClaimsPrincipal Contents
				{
					get => this.GetProperty(Data.ContentsProperty);
					set => this.SetProperty(Data.ContentsProperty, value);
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			using CslaGeneratorSerialization.Extensions;
			
			#nullable enable
			
			namespace Domains;
			
			public sealed partial class Data
				: global::CslaGeneratorSerialization.IGeneratorSerializable
			{
				void global::CslaGeneratorSerialization.IGeneratorSerializable.SetState(global::CslaGeneratorSerialization.GeneratorFormatterWriterContext context)
				{
					// global::Domains.Data.ContentsProperty
					var value0 = this.ReadProperty<global::System.Security.Claims.ClaimsPrincipal>(global::Domains.Data.ContentsProperty);
						
					if (value0 is not null)
					{
						var value0Principal = new global::Csla.Security.CslaClaimsPrincipal(value0);
						(var isReferenceDuplicate, var referenceId) = context.GetReference(value0Principal);
						
						if (isReferenceDuplicate)
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
							context.Writer.Write(referenceId);
						}
						else
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);
					
							using (var value0stream = new global::System.IO.MemoryStream())
							{
								using (var value0writer = new global::System.IO.BinaryWriter(value0stream))
								{
									value0Principal.WriteTo(value0writer);
									var value0buffer = value0stream.ToArray();
									context.Writer.Write((value0buffer.Length, value0buffer));
								}
							}
						}
					}
					else
					{
						context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Null);
					}
					
					context.Writer.Write(this.IsNew);
					context.Writer.Write(this.IsDeleted);
					context.Writer.Write(this.IsDirty);
					context.Writer.Write(this.IsChild);
					context.Writer.Write(this.DisableIEditableObject);
					
					var type = this.GetType();
					context.Writer.Write((bool)type.GetFieldInHierarchy("_neverCommitted")!.GetValue(this)!);
					context.Writer.Write((int)type.GetFieldInHierarchy("_editLevelAdded")!.GetValue(this)!);
					context.Writer.Write((int)type.GetFieldInHierarchy("_identity")!.GetValue(this)!);
				}
				
				void global::CslaGeneratorSerialization.IGeneratorSerializable.GetState(global::CslaGeneratorSerialization.GeneratorFormatterReaderContext context)
				{
					// global::Domains.Data.ContentsProperty
					switch (context.Reader.ReadStateValue())
					{
						case global::CslaGeneratorSerialization.SerializationState.Duplicate:
							this.LoadProperty(global::Domains.Data.ContentsProperty, context.GetReference(context.Reader.ReadInt32()));
							break;
						case global::CslaGeneratorSerialization.SerializationState.Value:
							var buffer = context.Reader.ReadByteArray();
						
							using (var stream = new global::System.IO.MemoryStream(buffer))
							{
								using (var reader = new global::System.IO.BinaryReader(stream))
								{
									var principal = new global::Csla.Security.CslaClaimsPrincipal(reader);
									this.LoadProperty(global::Domains.Data.ContentsProperty, principal);
									context.AddReference(principal);
								}
							}
							break;
						case global::CslaGeneratorSerialization.SerializationState.Null:
							break;
					}
					
					var type = this.GetType();
					type.GetFieldInHierarchy("_isNew")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_isDeleted")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_isDirty")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_isChild")!.SetValue(this, context.Reader.ReadBoolean());
					this.DisableIEditableObject = context.Reader.ReadBoolean();
					
					type.GetFieldInHierarchy("_neverCommitted")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_editLevelAdded")!.SetValue(this, context.Reader.ReadInt32());
					type.GetFieldInHierarchy("_identity")!.SetValue(this, context.Reader.ReadInt32());
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<GeneratorSerializationGenerator>(code,
			[(typeof(GeneratorSerializationGenerator), "Domains.Data_GeneratorSerialization.g.cs", generatedCode)],
			[]);
	}
}