using GeneratorSerialization.Tests;
using NUnit.Framework;

namespace CslaGeneratorSerialization.Tests.Generators.Graphs;

public static class ReadOnlyListBaseTests
{
	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Csla;
			using System;

			#nullable enable
			
			namespace Domains;

			[Serializable]
			public partial class Experiments
				: ReadOnlyBase<Experiments>
			{
				[Create]
				private void Create() =>
					this.Values = this.ApplicationContext.GetRequiredService<IChildDataPortal<Datum>>().CreateChild();

				public static readonly PropertyInfo<Datum> ValuesProperty =
					Experiments.RegisterProperty<Datum>(_ => _.Values);
				public Datum Values
				{
					get => this.ReadProperty(Experiments.ValuesProperty);
					private set => this.LoadProperty(Experiments.ValuesProperty, value);
				}
			}

			[Serializable]
			public partial class Datum
				: ReadOnlyListBase<Datum, Data>
			{
				[CreateChild]
				private void CreateChild() { }
			}

			[Serializable]
			public partial class Data
				: ReadOnlyBase<Data>
			{
				[CreateChild]
				private void CreateChild() { }

				public static readonly PropertyInfo<string> ValueProperty =
					Data.RegisterProperty<string>(_ => _.Value);
				public string Value
				{
					get => this.ReadProperty(Data.ValueProperty);
					private set => this.LoadProperty(Data.ValueProperty, value);
				}
			}
			""";

		var experimentsGeneratedCode =
			"""
			// <auto-generated/>
			
			using CslaGeneratorSerialization.Extensions;
			
			#nullable enable
			
			namespace Domains;
			
			public partial class Experiments
				: global::CslaGeneratorSerialization.IGeneratorSerializable
			{
				void global::CslaGeneratorSerialization.IGeneratorSerializable.SetState(global::CslaGeneratorSerialization.GeneratorFormatterWriterContext context)
				{
					// global::Domains.Experiments.ValuesProperty
					var value0 = this.ReadProperty<global::Domains.Datum>(global::Domains.Experiments.ValuesProperty);
					
					if (value0 is not null)
					{
						(var isReferenceDuplicate, var referenceId) = context.GetReference(value0);
					
						if (isReferenceDuplicate)
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
							context.Writer.Write(referenceId);
						}
						else
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);				
					
							var value0TypeName = value0.GetType().AssemblyQualifiedName!;
							(var isTypeNameDuplicate, var typeNameId) = context.GetTypeName(value0TypeName);
					
							if (isTypeNameDuplicate)
							{
								context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
								context.Writer.Write(typeNameId);
							}
							else
							{
								context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);
								context.Writer.Write(value0TypeName);
							}
					
							((global::CslaGeneratorSerialization.IGeneratorSerializable)value0).SetState(context);
						}
					}
					else
					{
						context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Null);
					}
				}
				
				void global::CslaGeneratorSerialization.IGeneratorSerializable.GetState(global::CslaGeneratorSerialization.GeneratorFormatterReaderContext context)
				{
					// global::Domains.Experiments.ValuesProperty
					switch (context.Reader.ReadStateValue())
					{
						case global::CslaGeneratorSerialization.SerializationState.Duplicate:
							this.LoadProperty(global::Domains.Experiments.ValuesProperty, context.GetReference(context.Reader.ReadInt32()));
							break;
						case global::CslaGeneratorSerialization.SerializationState.Value:
							global::Domains.Datum newValue;
									
							if (context.Reader.ReadStateValue() == global::CslaGeneratorSerialization.SerializationState.Duplicate)
							{
								newValue = context.CreateInstance<global::Domains.Datum>(context.GetTypeName(context.Reader.ReadInt32()));
							}
							else
							{
								var newValueTypeName = context.Reader.ReadString();
								context.AddTypeName(newValueTypeName);
								newValue = context.CreateInstance<global::Domains.Datum>(newValueTypeName);
							}
							((global::CslaGeneratorSerialization.IGeneratorSerializable)newValue).GetState(context);
							this.LoadProperty(global::Domains.Experiments.ValuesProperty, newValue);
							context.AddReference(newValue);
							break;
						case global::CslaGeneratorSerialization.SerializationState.Null:
							break;
					}
				}
			}
			
			""";

		var datumGeneratedCode =
			"""
			// <auto-generated/>
			
			using CslaGeneratorSerialization.Extensions;
			
			#nullable enable
			
			namespace Domains;
			
			public partial class Datum
				: global::CslaGeneratorSerialization.IGeneratorSerializable
			{
				void global::CslaGeneratorSerialization.IGeneratorSerializable.SetState(global::CslaGeneratorSerialization.GeneratorFormatterWriterContext context)
				{
					context.Writer.Write(this.Count);
					
					foreach (var item in this)
					{
						if (item is not null)
						{
							(var isReferenceDuplicate, var referenceId) = context.GetReference(item);
						
							if (isReferenceDuplicate)
							{
								context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
								context.Writer.Write(referenceId);
							}
							else
							{
								context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);
					
								var itemTypeName = item.GetType().AssemblyQualifiedName!;
								(var isTypeNameDuplicate, var typeNameId) = context.GetTypeName(itemTypeName);
					
								if (isTypeNameDuplicate)
								{
									context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
									context.Writer.Write(typeNameId);
								}
								else
								{
									context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);
									context.Writer.Write(itemTypeName);
								}
					
								((global::CslaGeneratorSerialization.IGeneratorSerializable)item).SetState(context);			
							}			
						}
						else
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Null);
						}
					}
					
					context.Writer.Write(this.IsReadOnly);
				}
				
				void global::CslaGeneratorSerialization.IGeneratorSerializable.GetState(global::CslaGeneratorSerialization.GeneratorFormatterReaderContext context)
				{
					var count = context.Reader.ReadInt32();
					
					using (this.LoadListMode)
					{
						for (var i = 0; i < count; i++)
						{
							switch (context.Reader.ReadStateValue())
							{
								case global::CslaGeneratorSerialization.SerializationState.Duplicate:
									this.Add((global::Domains.Data)context.GetReference(context.Reader.ReadInt32()));
									break;
								case global::CslaGeneratorSerialization.SerializationState.Value:
									global::Domains.Data newValue;
									
									if (context.Reader.ReadStateValue() == global::CslaGeneratorSerialization.SerializationState.Duplicate)
									{
										newValue = context.CreateInstance<global::Domains.Data>(context.GetTypeName(context.Reader.ReadInt32()));
									}
									else
									{
										var newValueTypeName = context.Reader.ReadString();
										context.AddTypeName(newValueTypeName);
										newValue = context.CreateInstance<global::Domains.Data>(newValueTypeName);
									}
									((global::CslaGeneratorSerialization.IGeneratorSerializable)newValue).GetState(context);
									this.Add(newValue);
									break;
								case global::CslaGeneratorSerialization.SerializationState.Null:
									break;
							}
						}
					}
					
					this.IsReadOnly = context.Reader.ReadBoolean();
				}
			}
			
			""";

		var dataGeneratedCode =
			"""
			// <auto-generated/>
			
			using CslaGeneratorSerialization.Extensions;
			
			#nullable enable
			
			namespace Domains;
			
			public partial class Data
				: global::CslaGeneratorSerialization.IGeneratorSerializable
			{
				void global::CslaGeneratorSerialization.IGeneratorSerializable.SetState(global::CslaGeneratorSerialization.GeneratorFormatterWriterContext context)
				{
					// global::Domains.Data.ValueProperty
					context.Writer.Write(this.ReadProperty<string>(global::Domains.Data.ValueProperty));
				}
				
				void global::CslaGeneratorSerialization.IGeneratorSerializable.GetState(global::CslaGeneratorSerialization.GeneratorFormatterReaderContext context)
				{
					// global::Domains.Data.ValueProperty
					this.LoadProperty(global::Domains.Data.ValueProperty, context.Reader.ReadString());
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<GeneratorSerializationGenerator>(code,
			[
				(typeof(GeneratorSerializationGenerator), "Domains.Experiments_GeneratorSerialization.g.cs", experimentsGeneratedCode),
				(typeof(GeneratorSerializationGenerator), "Domains.Datum_GeneratorSerialization.g.cs", datumGeneratedCode),
				(typeof(GeneratorSerializationGenerator), "Domains.Data_GeneratorSerialization.g.cs", dataGeneratedCode),
			],
			[]);
	}
}