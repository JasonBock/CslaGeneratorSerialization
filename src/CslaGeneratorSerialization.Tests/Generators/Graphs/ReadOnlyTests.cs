using GeneratorSerialization.Tests;
using NUnit.Framework;

namespace CslaGeneratorSerialization.Tests.Generators.Graphs;

public static class ReadOnlyTests
{
	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Csla;
			using System;

			namespace Domains;

			[Serializable]
			public sealed partial class Data
				: ReadOnlyBase<Data>
			{
				public static readonly PropertyInfo<string> StringContentsProperty =
					RegisterProperty<string>(_ => _.StringContents);
			   public string StringContents => this.GetProperty(Data.StringContentsProperty);

			   public static readonly PropertyInfo<ChildData> ChildContentsProperty =
					RegisterProperty<ChildData>(_ => _.ChildContents);
			   public ChildData ChildContents => this.GetProperty(Data.ChildContentsProperty);

			   public static readonly PropertyInfo<int> Int32ContentsProperty =
					RegisterProperty<int>(_ => _.Int32Contents);
			   public int Int32Contents => this.GetProperty(Data.Int32ContentsProperty);
			}

			[Serializable]
			public sealed partial class ChildData
				: ReadOnlyBase<ChildData>
			{
				public static readonly PropertyInfo<string> ValueProperty =
					RegisterProperty<string>(_ => _.Value);
				public string Value => this.GetProperty(ChildData.ValueProperty);
			}
			""";

		var dataGeneratedCode =
			"""
			// <auto-generated/>
			
			using CslaGeneratorSerialization.Extensions;
			
			#nullable enable
			
			namespace Domains;
			
			public sealed partial class Data
				: global::CslaGeneratorSerialization.IGeneratorSerializable
			{
				void global::CslaGeneratorSerialization.IGeneratorSerializable.SetState(global::CslaGeneratorSerialization.GeneratorFormatterWriterContext context)
				{
					// global::Domains.Data.Int32ContentsProperty
					context.Writer.Write(this.ReadProperty<int>(global::Domains.Data.Int32ContentsProperty));
					
					// global::Domains.Data.StringContentsProperty
					context.Writer.Write(this.ReadProperty<string>(global::Domains.Data.StringContentsProperty));
					
					// global::Domains.Data.ChildContentsProperty
					var value2 = this.ReadProperty<global::Domains.ChildData>(global::Domains.Data.ChildContentsProperty);
					
					if (value2 is not null)
					{
						(var isReferenceDuplicate, var referenceId) = context.GetReference(value2);
					
						if (isReferenceDuplicate)
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
							context.Writer.Write(referenceId);
						}
						else
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);				
							((global::CslaGeneratorSerialization.IGeneratorSerializable)value2).SetState(context);
						}
					}
					else
					{
						context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Null);
					}
				}
				
				void global::CslaGeneratorSerialization.IGeneratorSerializable.GetState(global::CslaGeneratorSerialization.GeneratorFormatterReaderContext context)
				{
					// global::Domains.Data.Int32ContentsProperty
					this.LoadProperty(global::Domains.Data.Int32ContentsProperty, context.Reader.ReadInt32());
					
					// global::Domains.Data.StringContentsProperty
					this.LoadProperty(global::Domains.Data.StringContentsProperty, context.Reader.ReadString());
					
					// global::Domains.Data.ChildContentsProperty
					switch (context.Reader.ReadStateValue())
					{
						case global::CslaGeneratorSerialization.SerializationState.Duplicate:
							this.LoadProperty(global::Domains.Data.ChildContentsProperty, context.GetReference(context.Reader.ReadInt32()));
							break;
						case global::CslaGeneratorSerialization.SerializationState.Value:
							var newValue = context.CreateInstance<global::Domains.ChildData>();
							((global::CslaGeneratorSerialization.IGeneratorSerializable)newValue).GetState(context);
							this.LoadProperty(global::Domains.Data.ChildContentsProperty, newValue);
							context.AddReference(newValue);
							break;
						case global::CslaGeneratorSerialization.SerializationState.Null:
							break;
					}
				}
			}
			
			""";

		var childGeneratedCode =
			"""
			// <auto-generated/>
			
			using CslaGeneratorSerialization.Extensions;
			
			#nullable enable
			
			namespace Domains;
			
			public sealed partial class ChildData
				: global::CslaGeneratorSerialization.IGeneratorSerializable
			{
				void global::CslaGeneratorSerialization.IGeneratorSerializable.SetState(global::CslaGeneratorSerialization.GeneratorFormatterWriterContext context)
				{
					// global::Domains.ChildData.ValueProperty
					context.Writer.Write(this.ReadProperty<string>(global::Domains.ChildData.ValueProperty));
				}
				
				void global::CslaGeneratorSerialization.IGeneratorSerializable.GetState(global::CslaGeneratorSerialization.GeneratorFormatterReaderContext context)
				{
					// global::Domains.ChildData.ValueProperty
					this.LoadProperty(global::Domains.ChildData.ValueProperty, context.Reader.ReadString());
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<GeneratorSerializationGenerator>(code,
			[
				(typeof(GeneratorSerializationGenerator), "Domains.Data_GeneratorSerialization.g.cs", dataGeneratedCode),
				(typeof(GeneratorSerializationGenerator), "Domains.ChildData_GeneratorSerialization.g.cs", childGeneratedCode)],
			[]);
	}
}