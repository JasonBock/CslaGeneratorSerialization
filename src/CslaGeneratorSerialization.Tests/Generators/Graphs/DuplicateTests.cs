using GeneratorSerialization.Tests;
using NUnit.Framework;

namespace CslaGeneratorSerialization.Tests.Generators.Graphs;

public static class DuplicateTests
{
	[Test]
	public static async Task GenerateAsync()
	{
		var code =
			"""
			using Csla;
			using System;

			#nullable enable
			
			namespace Domains;

			[Serializable]
			public sealed partial class Node
				: BusinessBase<Node>
			{
				[Create]
				private void Create() { }

				public static readonly PropertyInfo<Node?> LeftProperty =
					RegisterProperty<Node?>(_ => _.Left);
				public Node? Left
				{
					get => this.GetProperty(Node.LeftProperty);
					set => this.SetProperty(Node.LeftProperty, value);
				}

				public static readonly PropertyInfo<Node?> RightProperty =
					RegisterProperty<Node?>(_ => _.Right);
				public Node? Right
				{
					get => this.GetProperty(Node.RightProperty);
					set => this.SetProperty(Node.RightProperty, value);
				}

				public static readonly PropertyInfo<string> NameProperty =
					RegisterProperty<string>(_ => _.Name);
				public string Name
				{
					get => this.GetProperty(Node.NameProperty);
					set => this.SetProperty(Node.NameProperty, value);
				}
			}
			""";

		var generatedCode =
			"""
			// <auto-generated/>
			
			using CslaGeneratorSerialization.Extensions;
			
			#nullable enable
			
			namespace Domains;
			
			public sealed partial class Node
				: global::CslaGeneratorSerialization.IGeneratorSerializable
			{
				void global::CslaGeneratorSerialization.IGeneratorSerializable.SetState(global::CslaGeneratorSerialization.GeneratorFormatterWriterContext context)
				{
					// global::Domains.Node.NameProperty
					context.Writer.Write(this.ReadProperty<string>(global::Domains.Node.NameProperty));
					
					// global::Domains.Node.LeftProperty
					var value1 = this.ReadProperty<global::Domains.Node?>(global::Domains.Node.LeftProperty);
					
					if (value1 is not null)
					{
						(var isReferenceDuplicate, var referenceId) = context.GetReference(value1);
					
						if (isReferenceDuplicate)
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
							context.Writer.Write(referenceId);
						}
						else
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);				
							((global::CslaGeneratorSerialization.IGeneratorSerializable)value1).SetState(context);
						}
					}
					else
					{
						context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Null);
					}
					
					// global::Domains.Node.RightProperty
					var value2 = this.ReadProperty<global::Domains.Node?>(global::Domains.Node.RightProperty);
					
					if (value2 is not null)
					{
						(var isReferenceDuplicate, var referenceId) = context.GetReference(value2);
					
						if (isReferenceDuplicate)
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Duplicate);
							context.Writer.Write(referenceId);
						}
						else
						{
							context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Value);				
							((global::CslaGeneratorSerialization.IGeneratorSerializable)value2).SetState(context);
						}
					}
					else
					{
						context.Writer.Write((byte)global::CslaGeneratorSerialization.SerializationState.Null);
					}
					
					context.Writer.Write(this.IsNew);
					context.Writer.Write(this.IsDeleted);
					context.Writer.Write(this.IsDirty);
					context.Writer.Write(this.IsChild);
					context.Writer.Write(this.DisableIEditableObject);
					
					var type = this.GetType();
					context.Writer.Write((bool)type.GetFieldInHierarchy("_neverCommitted")!.GetValue(this)!);
					context.Writer.Write((int)type.GetFieldInHierarchy("_editLevelAdded")!.GetValue(this)!);
					context.Writer.Write((int)type.GetFieldInHierarchy("_identity")!.GetValue(this)!);
				}
				
				void global::CslaGeneratorSerialization.IGeneratorSerializable.GetState(global::CslaGeneratorSerialization.GeneratorFormatterReaderContext context)
				{
					// global::Domains.Node.NameProperty
					this.LoadProperty(global::Domains.Node.NameProperty, context.Reader.ReadString());
					
					// global::Domains.Node.LeftProperty
					switch (context.Reader.ReadStateValue())
					{
						case global::CslaGeneratorSerialization.SerializationState.Duplicate:
							this.LoadProperty(global::Domains.Node.LeftProperty, context.GetReference(context.Reader.ReadInt32()));
							break;
						case global::CslaGeneratorSerialization.SerializationState.Value:
							var newValue = context.CreateInstance<global::Domains.Node>();
							((global::CslaGeneratorSerialization.IGeneratorSerializable)newValue).GetState(context);
							this.LoadProperty(global::Domains.Node.LeftProperty, newValue);
							context.AddReference(newValue);
							break;
						case global::CslaGeneratorSerialization.SerializationState.Null:
							break;
					}
					
					// global::Domains.Node.RightProperty
					switch (context.Reader.ReadStateValue())
					{
						case global::CslaGeneratorSerialization.SerializationState.Duplicate:
							this.LoadProperty(global::Domains.Node.RightProperty, context.GetReference(context.Reader.ReadInt32()));
							break;
						case global::CslaGeneratorSerialization.SerializationState.Value:
							var newValue = context.CreateInstance<global::Domains.Node>();
							((global::CslaGeneratorSerialization.IGeneratorSerializable)newValue).GetState(context);
							this.LoadProperty(global::Domains.Node.RightProperty, newValue);
							context.AddReference(newValue);
							break;
						case global::CslaGeneratorSerialization.SerializationState.Null:
							break;
					}
					
					var type = this.GetType();
					type.GetFieldInHierarchy("_isNew")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_isDeleted")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_isDirty")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_isChild")!.SetValue(this, context.Reader.ReadBoolean());
					this.DisableIEditableObject = context.Reader.ReadBoolean();
					
					type.GetFieldInHierarchy("_neverCommitted")!.SetValue(this, context.Reader.ReadBoolean());
					type.GetFieldInHierarchy("_editLevelAdded")!.SetValue(this, context.Reader.ReadInt32());
					type.GetFieldInHierarchy("_identity")!.SetValue(this, context.Reader.ReadInt32());
				}
			}
			
			""";

		await TestAssistants.RunGeneratorAsync<GeneratorSerializationGenerator>(code,
			[
				(typeof(GeneratorSerializationGenerator), "Domains.Node_GeneratorSerialization.g.cs", generatedCode),
			],
			[]);
	}
}